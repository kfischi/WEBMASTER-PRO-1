<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ WebMaster Pro - ◊ê◊ì◊ô◊ò◊ï◊® ◊ï◊ô◊ñ◊ï◊ê◊ú◊ô ◊ê◊û◊ô◊™◊ô</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: white;
            height: 100vh;
            overflow: hidden;
        }

        .header {
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(10px);
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            z-index: 1000;
            position: relative;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            background: linear-gradient(45deg, #00d4ff, #9f7aea);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-center {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .site-selector {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            color: white;
            font-size: 14px;
            min-width: 250px;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn.success {
            background: linear-gradient(45deg, #48bb78, #38a169);
        }

        .btn.warning {
            background: linear-gradient(45deg, #ed8936, #dd6b20);
        }

        .btn.info {
            background: linear-gradient(45deg, #4299e1, #3182ce);
        }

        .main-container {
            display: grid;
            grid-template-columns: 300px 1fr 280px;
            height: calc(100vh - 70px);
            gap: 1px;
            background: #000;
        }

        .sidebar {
            background: rgba(22, 33, 62, 0.9);
            backdrop-filter: blur(10px);
            padding: 1rem;
            overflow-y: auto;
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-right {
            background: rgba(22, 33, 62, 0.9);
            backdrop-filter: blur(10px);
            padding: 1rem;
            overflow-y: auto;
            border-left: 1px solid rgba(255, 255, 255, 0.1);
        }

        .content-area {
            background: rgba(26, 26, 46, 0.9);
            display: flex;
            flex-direction: column;
        }

        .section-title {
            color: #00d4ff;
            font-weight: bold;
            margin-bottom: 1rem;
            font-size: 16px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .file-input-section {
            background: rgba(255, 255, 255, 0.05);
            border: 2px dashed rgba(0, 212, 255, 0.3);
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            margin-bottom: 2rem;
            transition: all 0.3s;
        }

        .file-input-section:hover {
            border-color: #00d4ff;
            background: rgba(0, 212, 255, 0.1);
        }

        .file-input {
            display: none;
        }

        .file-input-label {
            background: linear-gradient(45deg, #00d4ff, #667eea);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            transition: all 0.3s;
        }

        .file-input-label:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);
        }

        .quick-load-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .quick-load-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.75rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            text-align: center;
            transition: all 0.3s;
        }

        .quick-load-btn:hover {
            background: #667eea;
            transform: translateY(-1px);
        }

        .editor-controls {
            background: rgba(255, 255, 255, 0.05);
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .current-file {
            font-weight: 600;
            color: #00d4ff;
        }

        .device-selector {
            display: flex;
            gap: 0.5rem;
        }

        .device-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.5rem;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .device-btn.active {
            background: #667eea;
            border-color: #667eea;
        }

        .preview-area {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            background: rgba(0, 0, 0, 0.3);
        }

        .website-iframe {
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 12px;
            background: white;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            transition: all 0.3s;
        }

        .no-file-message {
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-size: 18px;
            max-width: 400px;
        }

        .no-file-message h3 {
            color: #00d4ff;
            margin-bottom: 1rem;
            font-size: 24px;
        }

        .tools-section {
            margin-bottom: 2rem;
        }

        .tool-group {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .tool-title {
            color: #00d4ff;
            font-weight: bold;
            margin-bottom: 1rem;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: rgba(255, 255, 255, 0.8);
            font-size: 12px;
        }

        .form-input {
            width: 100%;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 0.5rem;
            color: white;
            font-size: 14px;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 10px rgba(102, 126, 234, 0.3);
        }

        .color-input {
            width: 100%;
            height: 40px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
        }

        .range-input {
            width: 100%;
            margin: 0.5rem 0;
        }

        .ai-section {
            background: linear-gradient(45deg, rgba(159, 122, 234, 0.1), rgba(102, 126, 234, 0.1));
            border: 1px solid rgba(159, 122, 234, 0.3);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 2rem;
        }

        .ai-textarea {
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 0.75rem;
            color: white;
            font-family: inherit;
            resize: vertical;
        }

        .ai-btn {
            width: 100%;
            background: linear-gradient(45deg, #9f7aea, #667eea);
            color: white;
            border: none;
            padding: 0.75rem;
            border-radius: 8px;
            margin-top: 0.75rem;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }

        .ai-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(159, 122, 234, 0.4);
        }

        .notification {
            position: fixed;
            top: 100px;
            right: 20px;
            background: linear-gradient(45deg, #48bb78, #38a169);
            color: white;
            padding: 1rem;
            border-radius: 8px;
            max-width: 300px;
            z-index: 2000;
            transform: translateX(100%);
            transition: transform 0.3s;
            box-shadow: 0 5px 20px rgba(72, 187, 120, 0.3);
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.error {
            background: linear-gradient(45deg, #f56565, #e53e3e);
        }

        .notification.info {
            background: linear-gradient(45deg, #4299e1, #3182ce);
        }

        .quick-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .quick-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.5rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            text-align: center;
            transition: all 0.3s;
        }

        .quick-btn:hover {
            background: #667eea;
            transform: translateY(-1px);
        }

        .editing-mode-indicator {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: linear-gradient(45deg, #00d4ff, #667eea);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
            z-index: 2000;
            transform: translateY(100px);
            transition: transform 0.3s;
        }

        .editing-mode-indicator.show {
            transform: translateY(0);
        }

        @media (max-width: 1024px) {
            .main-container {
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr auto;
            }
            
            .sidebar, .sidebar-right {
                height: auto;
                max-height: 200px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            üöÄ WebMaster Pro - ◊ê◊ì◊ô◊ò◊ï◊® ◊ê◊û◊ô◊™◊ô
        </div>
        
        <div class="header-center">
            <select class="site-selector" id="siteSelector" onchange="loadSelectedSite()">
                <option value="">◊ë◊ó◊® ◊ê◊™◊® ◊ú◊¢◊®◊ô◊õ◊î...</option>
                <option value="dr-michal-rosen">◊ì"◊® ◊û◊ô◊õ◊ú ◊®◊ï◊ñ◊ü - ◊®◊§◊ï◊ê◊î ◊ê◊°◊™◊ò◊ô◊™ (‚Ç™2,800)</option>
                <option value="fitness-coach">◊ì◊†◊ô ◊§◊ô◊ò - ◊û◊ê◊û◊ü ◊õ◊ï◊©◊® (‚Ç™2,200)</option>
                <option value="yoga-studio">◊°◊ò◊ï◊ì◊ô◊ï ◊ê◊ï◊î◊ù - ◊ô◊ï◊í◊î (‚Ç™1,900)</option>
                <option value="nutritionist">◊ì"◊® ◊©◊®◊î ◊õ◊î◊ü - ◊™◊ñ◊ï◊†◊ê◊ô◊™ (‚Ç™2,400)</option>
                <option value="law-firm">◊û◊©◊®◊ì ◊ë◊®◊ß◊ï◊ë◊ô◊• - ◊¢◊ï"◊ì (‚Ç™2,500)</option>
                <option value="accountant">◊®◊ô◊†◊î ◊ú◊ï◊ô - ◊ó◊©◊ë◊™ ◊©◊õ◊® (‚Ç™2,000)</option>
                <option value="beauty-salon">◊û◊°◊§◊®◊î BELLA - ◊ô◊ï◊§◊ô (‚Ç™1,700)</option>
                <option value="tutor">◊ì"◊® ◊®◊ï◊†◊ô◊™ ◊ú◊ï◊ô - ◊û◊ï◊®◊î ◊§◊®◊ò◊ô◊™ (‚Ç™2,100)</option>
                <option value="aesthetic-clinic">◊ß◊ú◊ô◊†◊ô◊ß◊™ ◊ô◊ï◊§◊ô ◊§◊®◊û◊ô◊ï◊ù (‚Ç™3,200)</option>
                <option value="multibrawn">◊û◊ï◊ú◊ò◊ô◊ë◊®◊ê◊ï◊ü - ◊†◊ï◊§◊© ◊ï◊ê◊ô◊®◊ï◊¢◊ô◊ù (‚Ç™2,300)</option>
                <option value="real-estate">◊†◊ì◊ú"◊ü ◊§◊®◊û◊ô◊ï◊ù (‚Ç™2,700)</option>
                <option value="interior-design">üÜï ◊°◊ò◊ï◊ì◊ô◊ï ◊†◊ï◊ô◊î - ◊¢◊ô◊¶◊ï◊ë ◊§◊†◊ô◊ù (‚Ç™2,400)</option>
            </select>
        </div>
        
        <div class="header-actions">
            <button class="btn info" onclick="uploadCustomFile()">
                üìÅ ◊î◊¢◊ú◊î ◊ß◊ï◊ë◊• HTML
            </button>
            <button class="btn success" onclick="saveFile()">
                üíæ ◊©◊û◊ï◊®
            </button>
            <button class="btn" onclick="previewFile()">
                üëÅÔ∏è ◊™◊¶◊ï◊í◊î ◊û◊ß◊ì◊ô◊û◊î
            </button>
            <button class="btn warning" onclick="exportFile()">
                üì• ◊ô◊ô◊¶◊ê
            </button>
        </div>
    </div>

    <div class="main-container">
        <!-- Left Sidebar - File Management & AI -->
        <div class="sidebar">
            <div class="section-title">
                üìÅ ◊†◊ô◊î◊ï◊ú ◊ß◊ë◊¶◊ô◊ù
            </div>
            
            <div class="file-input-section">
                <input type="file" id="fileInput" class="file-input" accept=".html,.htm" onchange="loadFile()">
                <label for="fileInput" class="file-input-label">
                    <i class="fas fa-upload"></i>
                    ◊ë◊ó◊® ◊ß◊ï◊ë◊• HTML
                </label>
                <p style="margin-top: 1rem; font-size: 14px; opacity: 0.8;">
                    ◊í◊®◊ï◊® ◊ß◊ï◊ë◊• HTML ◊ú◊õ◊ê◊ü ◊ê◊ï ◊ú◊ó◊• ◊ú◊ë◊ó◊ô◊®◊î
                </p>
            </div>

            <div class="quick-load-buttons">
                <button class="quick-load-btn" onclick="loadSampleSite('medical')">
                    üè• ◊®◊§◊ï◊ê◊ô
                </button>
                <button class="quick-load-btn" onclick="loadSampleSite('business')">
                    üíº ◊¢◊°◊ß◊ô
                </button>
                <button class="quick-load-btn" onclick="loadSampleSite('fitness')">
                    üí™ ◊õ◊ï◊©◊®
                </button>
                <button class="quick-load-btn" onclick="loadSampleSite('education')">
                    üéì ◊ó◊ô◊†◊ï◊ö
                </button>
            </div>

            <div class="ai-section">
                <div class="section-title">
                    ü§ñ AI Assistant
                </div>
                <textarea 
                    class="ai-textarea" 
                    id="aiInput" 
                    placeholder="◊ë◊ß◊©◊ï◊™ AI ◊ú◊ì◊ï◊í◊û◊î:

üé® '◊©◊†◊î ◊ê◊™ ◊î◊¶◊ë◊¢◊ô◊ù ◊ú◊î◊ô◊ï◊™ ◊ô◊ï◊™◊® ◊û◊ï◊ì◊®◊†◊ô◊ô◊ù'
üì± '◊î◊™◊ê◊ù ◊ê◊™ ◊î◊ê◊™◊® ◊ú◊ò◊ú◊§◊ï◊ü ◊†◊ô◊ô◊ì'
‚≠ê '◊î◊ï◊°◊£ ◊°◊ß◊¶◊ô◊ô◊™ ◊ë◊ô◊ß◊ï◊®◊ï◊™ ◊ú◊ß◊ï◊ó◊ï◊™'
üîó '◊©◊§◊® ◊ê◊™ ◊õ◊§◊™◊ï◊®◊ô WhatsApp'
üí° '◊î◊ï◊°◊£ ◊û◊ó◊©◊ë◊ï◊ü ◊û◊ó◊ô◊®'
üöÄ '◊©◊§◊® ◊ê◊™ ◊î-SEO'
üìù '◊õ◊™◊ï◊ë ◊ò◊ß◊°◊ò◊ô◊ù ◊ô◊ï◊™◊® ◊û◊©◊õ◊†◊¢◊ô◊ù'
üèÜ '◊î◊ï◊°◊£ ◊™◊¢◊ï◊ì◊ï◊™ ◊ï◊î◊°◊û◊õ◊ï◊™'

◊ê◊ï ◊õ◊™◊ï◊ë ◊ë◊ß◊©◊î ◊û◊ï◊™◊ê◊û◊™..."
                ></textarea>
                <button class="ai-btn" onclick="executeAI()">
                    ‚ú® ◊î◊§◊¢◊ú AI
                </button>
            </div>
        </div>

        <!-- Center - Website Preview -->
        <div class="content-area">
            <div class="editor-controls">
                <div class="current-file" id="currentFile">
                    ◊ê◊ô◊ü ◊ß◊ï◊ë◊• ◊†◊ò◊¢◊ü
                </div>
                <div class="device-selector">
                    <button class="device-btn active" onclick="setDevice('desktop')" title="Desktop">
                        üñ•Ô∏è
                    </button>
                    <button class="device-btn" onclick="setDevice('tablet')" title="Tablet">
                        üì±
                    </button>
                    <button class="device-btn" onclick="setDevice('mobile')" title="Mobile">
                        üì≤
                    </button>
                </div>
            </div>
            <div class="preview-area" id="previewArea">
                <div class="no-file-message">
                    <h3>üéØ ◊ë◊ó◊® ◊ê◊™◊® ◊ê◊ï ◊î◊¢◊ú◊î ◊ß◊ï◊ë◊• HTML</h3>
                    <p>◊ë◊ó◊® ◊ê◊ó◊ì ◊û-12 ◊î◊ê◊™◊®◊ô◊ù ◊î◊û◊ß◊¶◊ï◊¢◊ô◊ô◊ù ◊©◊ú◊†◊ï ◊û◊î◊®◊©◊ô◊û◊î ◊ú◊û◊¢◊ú◊î</p>
                    <p>◊ê◊ï ◊î◊¢◊ú◊î ◊ß◊ï◊ë◊• HTML ◊û◊©◊ú◊ö ◊ú◊¢◊®◊ô◊õ◊î</p>
                    <p><strong>üÜï ◊õ◊ï◊ú◊ú ◊¢◊õ◊©◊ô◊ï: ◊°◊ò◊ï◊ì◊ô◊ï ◊†◊ï◊ô◊î ◊¢◊ô◊¶◊ï◊ë ◊§◊†◊ô◊ù!</strong></p>
                </div>
                <iframe class="website-iframe" id="websiteFrame" style="display: none;"></iframe>
            </div>
        </div>

        <!-- Right Sidebar - Editing Tools -->
        <div class="sidebar-right">
            <div class="tools-section">
                <div class="section-title">
                    üõ†Ô∏è ◊õ◊ú◊ô ◊¢◊®◊ô◊õ◊î ◊û◊™◊ß◊ì◊û◊ô◊ù
                </div>
                
                <!-- Text Editing -->
                <div class="tool-group">
                    <div class="tool-title">üìù ◊¢◊®◊ô◊õ◊™ ◊ò◊ß◊°◊ò</div>
                    <div class="form-group">
                        <label class="form-label">◊í◊ï◊ì◊ú ◊í◊ï◊§◊ü</label>
                        <input type="range" class="range-input" id="fontSize" min="10" max="48" value="16" onchange="updateFontSize(this.value)">
                        <span id="fontSizeValue">16px</span>
                    </div>
                    <div class="form-group">
                        <label class="form-label">◊¶◊ë◊¢ ◊ò◊ß◊°◊ò</label>
                        <input type="color" class="color-input" id="textColor" value="#333333" onchange="updateTextColor(this.value)">
                    </div>
                    <div class="quick-actions">
                        <button class="quick-btn" onclick="toggleBold()">
                            <strong>B</strong> ◊¢◊ë◊î
                        </button>
                        <button class="quick-btn" onclick="toggleItalic()">
                            <em>I</em> ◊†◊ò◊ï◊ô
                        </button>
                    </div>
                </div>

                <!-- Colors -->
                <div class="tool-group">
                    <div class="tool-title">üé® ◊¶◊ë◊¢◊ô◊ù ◊ï◊¢◊ô◊¶◊ï◊ë</div>
                    <div class="form-group">
                        <label class="form-label">◊¶◊ë◊¢ ◊®◊ß◊¢</label>
                        <input type="color" class="color-input" id="bgColor" value="#ffffff" onchange="updateBgColor(this.value)">
                    </div>
                    <div class="form-group">
                        <label class="form-label">◊¶◊ë◊¢ ◊®◊ê◊©◊ô</label>
                        <input type="color" class="color-input" id="primaryColor" value="#667eea" onchange="updatePrimaryColor(this.value)">
                    </div>
                </div>

                <!-- Layout -->
                <div class="tool-group">
                    <div class="tool-title">üìê ◊§◊®◊ô◊°◊î</div>
                    <div class="form-group">
                        <label class="form-label">◊®◊ï◊ó◊ë ◊û◊ß◊°◊ô◊û◊ú◊ô</label>
                        <input type="text" class="form-input" id="maxWidth" value="1200px" onchange="updateMaxWidth(this.value)">
                    </div>
                    <div class="form-group">
                        <label class="form-label">◊û◊®◊ï◊ï◊ó ◊§◊†◊ô◊û◊ô</label>
                        <input type="range" class="range-input" id="padding" min="0" max="50" value="20" onchange="updatePadding(this.value)">
                        <span id="paddingValue">20px</span>
                    </div>
                </div>

                <!-- Advanced -->
                <div class="tool-group">
                    <div class="tool-title">‚ö° ◊õ◊ú◊ô◊ù ◊û◊™◊ß◊ì◊û◊ô◊ù</div>
                    <button class="quick-btn" onclick="enableEditMode()" style="grid-column: 1 / -1; margin-bottom: 0.5rem;">
                        ‚úèÔ∏è ◊û◊¶◊ë ◊¢◊®◊ô◊õ◊î
                    </button>
                    <button class="quick-btn" onclick="addWhatsAppButton()" style="grid-column: 1 / -1; margin-bottom: 0.5rem;">
                        üì± ◊î◊ï◊°◊£ WhatsApp
                    </button>
                    <button class="quick-btn" onclick="optimizeForMobile()" style="grid-column: 1 / -1;">
                        üì≤ ◊ê◊ï◊§◊ò◊ô◊û◊ô◊ñ◊¶◊ô◊î ◊ú◊†◊ô◊ô◊ì
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="editing-mode-indicator" id="editingIndicator">
        ‚úèÔ∏è ◊û◊¶◊ë ◊¢◊®◊ô◊õ◊î ◊§◊¢◊ô◊ú - ◊ú◊ó◊• ◊¢◊ú ◊ò◊ß◊°◊ò ◊ú◊¢◊®◊ô◊õ◊î
    </div>

    <script>
        console.log('üöÄ WebMaster Pro Real Editor ◊†◊ò◊¢◊ü...');

        // Global variables
        let currentFileName = null;
        let currentFileContent = null;
        let editingMode = false;
        let hasUnsavedChanges = false;

        // Website templates
        const websiteTemplates = {
            'dr-michal-rosen': {
                name: '◊ì"◊® ◊û◊ô◊õ◊ú ◊®◊ï◊ñ◊ü - ◊®◊§◊ï◊ê◊î ◊ê◊°◊™◊ò◊ô◊™',
                file: './websites/dr-michal-rosen.html',
                price: 2800
            },
            'fitness-coach': {
                name: '◊ì◊†◊ô ◊§◊ô◊ò - ◊û◊ê◊û◊ü ◊õ◊ï◊©◊®',
                file: './websites/fitness-coach.html',
                price: 2200
            },
            'yoga-studio': {
                name: '◊°◊ò◊ï◊ì◊ô◊ï ◊ê◊ï◊î◊ù - ◊ô◊ï◊í◊î',
                file: './websites/yoga-studio.html',
                price: 1900
            },
            'nutritionist': {
                name: '◊ì"◊® ◊©◊®◊î ◊õ◊î◊ü - ◊™◊ñ◊ï◊†◊ê◊ô◊™',
                file: './websites/nutritionist.html',
                price: 2400
            },
            'law-firm': {
                name: '◊û◊©◊®◊ì ◊ë◊®◊ß◊ï◊ë◊ô◊• - ◊¢◊ï"◊ì',
                file: './websites/law-firm.html',
                price: 2500
            },
            'accountant': {
                name: '◊®◊ô◊†◊î ◊ú◊ï◊ô - ◊ó◊©◊ë◊™ ◊©◊õ◊®',
                file: './websites/accountant.html',
                price: 2000
            },
            'beauty-salon': {
                name: '◊û◊°◊§◊®◊î BELLA - ◊ô◊ï◊§◊ô',
                file: './websites/beauty-salon.html',
                price: 1700
            },
            'tutor': {
                name: '◊ì"◊® ◊®◊ï◊†◊ô◊™ ◊ú◊ï◊ô - ◊û◊ï◊®◊î ◊§◊®◊ò◊ô◊™',
                file: './websites/tutor.html',
                price: 2100
            },
            'aesthetic-clinic': {
                name: '◊ß◊ú◊ô◊†◊ô◊ß◊™ ◊ô◊ï◊§◊ô ◊§◊®◊û◊ô◊ï◊ù',
                file: './websites/aesthetic-clinic.html',
                price: 3200
            },
            'multibrawn': {
                name: '◊û◊ï◊ú◊ò◊ô◊ë◊®◊ê◊ï◊ü - ◊†◊ï◊§◊© ◊ï◊ê◊ô◊®◊ï◊¢◊ô◊ù',
                file: './websites/multibrawn.html',
                price: 2300
            },
            'real-estate': {
                name: '◊†◊ì◊ú"◊ü ◊§◊®◊û◊ô◊ï◊ù',
                file: './websites/real-estate.html',
                price: 2700
            },
            'interior-design': {
                name: '◊°◊ò◊ï◊ì◊ô◊ï ◊†◊ï◊ô◊î - ◊¢◊ô◊¶◊ï◊ë ◊§◊†◊ô◊ù ◊ô◊ï◊ß◊®◊™◊ô',
                file: './websites/interior-design.html',
                price: 2400
            }
        };

        // Load selected site from dropdown
        function loadSelectedSite() {
            const selector = document.getElementById('siteSelector');
            const siteId = selector.value;
            
            if (!siteId) return;
            
            const template = websiteTemplates[siteId];
            if (template) {
                loadWebsiteFromURL(template.file, template.name);
                showNotification('success', '◊ê◊™◊® ◊†◊ò◊¢◊ü', `${template.name} ◊†◊ò◊¢◊ü ◊ë◊î◊¶◊ú◊ó◊î`);
            }
        }

        // Load website from URL
        function loadWebsiteFromURL(url, name) {
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('◊ß◊ï◊ë◊• ◊ú◊ê ◊†◊û◊¶◊ê');
                    }
                    return response.text();
                })
                .then(html => {
                    loadHTMLContent(html, name || url);
                })
                .catch(error => {
                    console.error('‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊ò◊¢◊ô◊†◊™ ◊ê◊™◊®:', error);
                    showNotification('error', '◊©◊í◊ô◊ê◊î', '◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊ò◊¢◊ï◊ü ◊ê◊™ ◊î◊ê◊™◊®. ◊†◊ò◊¢◊ü ◊ì◊û◊ï ◊ë◊û◊ß◊ï◊ù.');
                    loadDemoWebsite(name || '◊ì◊û◊ï');
                });
        }

        // Load HTML content into editor
        function loadHTMLContent(html, filename) {
            currentFileName = filename;
            currentFileContent = html;
            hasUnsavedChanges = false;
            
            // Update UI
            document.getElementById('currentFile').textContent = filename;
            document.querySelector('.no-file-message').style.display = 'none';
            document.getElementById('websiteFrame').style.display = 'block';
            
            // Add editable attributes
            const editableHTML = addEditableAttributes(html);
            
            // Load into iframe
            const frame = document.getElementById('websiteFrame');
            frame.srcdoc = editableHTML;
            
            // Setup editing after load
            frame.onload = () => {
                setupEditingCapabilities(frame);
                showNotification('success', '◊ß◊ï◊ë◊• ◊†◊ò◊¢◊ü', `${filename} ◊û◊ï◊õ◊ü ◊ú◊¢◊®◊ô◊õ◊î`);
            };
        }

        // Load file from input
        function loadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) return;
            
            if (!file.name.toLowerCase().endsWith('.html') && !file.name.toLowerCase().endsWith('.htm')) {
                showNotification('error', '◊°◊ï◊í ◊ß◊ï◊ë◊• ◊ú◊ê ◊†◊™◊û◊ö', '◊†◊ê ◊ú◊ë◊ó◊ï◊® ◊ß◊ï◊ë◊• HTML');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = (e) => {
                loadHTMLContent(e.target.result, file.name);
            };
            reader.readAsText(file);
        }

        // Add editable attributes to HTML
        function addEditableAttributes(html) {
            let editableHTML = html;
            
            // Add data-editable to common elements
            editableHTML = editableHTML.replace(/<h1([^>]*)>/g, '<h1$1 data-editable="heading">');
            editableHTML = editableHTML.replace(/<h2([^>]*)>/g, '<h2$1 data-editable="heading">');
            editableHTML = editableHTML.replace(/<h3([^>]*)>/g, '<h3$1 data-editable="heading">');
            editableHTML = editableHTML.replace(/<p([^>]*)>/g, '<p$1 data-editable="text">');
            editableHTML = editableHTML.replace(/<button([^>]*)>/g, '<button$1 data-editable="button">');
            editableHTML = editableHTML.replace(/<a([^>]*)>/g, '<a$1 data-editable="link">');
            
            return editableHTML;
        }

        // Setup editing capabilities
        function setupEditingCapabilities(frame) {
            try {
                const frameDoc = frame.contentDocument || frame.contentWindow.document;
                
                // Add editing CSS
                const editingCSS = `
                    [data-editable]:hover {
                        outline: 2px dashed #00d4ff !important;
                        background: rgba(0, 212, 255, 0.1) !important;
                        cursor: pointer !important;
                    }
                    [data-editable].editing {
                        outline: 2px solid #00d4ff !important;
                        background: rgba(0, 212, 255, 0.2) !important;
                    }
                    .webmaster-editor-highlight {
                        outline: 2px solid #00ff88 !important;
                        background: rgba(0, 255, 136, 0.1) !important;
                    }
                `;
                
                const styleElement = frameDoc.createElement('style');
                styleElement.textContent = editingCSS;
                frameDoc.head.appendChild(styleElement);
                
                // Add click listeners only if editing mode is active
                if (editingMode) {
                    frameDoc.addEventListener('click', handleElementClick);
                }
                
                console.log('‚úÖ ◊ô◊õ◊ï◊ú◊ï◊™ ◊¢◊®◊ô◊õ◊î ◊î◊ï◊í◊ì◊®◊ï ◊ë◊î◊¶◊ú◊ó◊î');
            } catch (error) {
                console.error('‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊î◊í◊ì◊®◊™ ◊¢◊®◊ô◊õ◊î:', error);
            }
        }

        // Handle element click for editing
        function handleElementClick(event) {
            if (!editingMode) return;
            
            const element = event.target.closest('[data-editable]');
            if (element) {
                event.preventDefault();
                startEditing(element);
            }
        }

        // Start editing element
        function startEditing(element) {
            const frame = document.getElementById('websiteFrame');
            const frameDoc = frame.contentDocument || frame.contentWindow.document;
            
            // Remove editing class from other elements
            frameDoc.querySelectorAll('.editing').forEach(el => el.classList.remove('editing'));
            
            // Add editing class to current element
            element.classList.add('editing');
            
            const originalText = element.textContent;
            const editableType = element.getAttribute('data-editable');
            
            if (editableType === 'text' || editableType === 'heading') {
                element.contentEditable = true;
                element.focus();
                
                // Save on Enter
                element.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        finishEditing(element, originalText);
                    } else if (e.key === 'Escape') {
                        element.textContent = originalText;
                        finishEditing(element, originalText);
                    }
                });
                
                // Save on blur
                element.addEventListener('blur', function() {
                    finishEditing(element, originalText);
                });
            }
            
            showNotification('info', '◊û◊¶◊ë ◊¢◊®◊ô◊õ◊î', '◊¢◊®◊ï◊ö ◊ê◊™ ◊î◊ò◊ß◊°◊ò ◊ï◊ú◊ó◊• Enter ◊ú◊©◊û◊ô◊®◊î');
        }

        // Finish editing
        function finishEditing(element, originalText) {
            element.contentEditable = false;
            element.classList.remove('editing');
            
            const newText = element.textContent;
            if (newText !== originalText) {
                hasUnsavedChanges = true;
                updateFileIndicator();
                showNotification('success', '◊©◊ï◊†◊î', '◊î◊ò◊ß◊°◊ò ◊©◊ï◊†◊î - ◊ñ◊õ◊ï◊® ◊ú◊©◊û◊ï◊®');
            }
        }

        // Update file indicator
        function updateFileIndicator() {
            const indicator = document.getElementById('currentFile');
            if (hasUnsavedChanges) {
                indicator.textContent = `${currentFileName} *`;
                indicator.style.color = '#ed8936';
            } else {
                indicator.textContent = currentFileName;
                indicator.style.color = '#00d4ff';
            }
        }

        // Enable/disable editing mode
        function enableEditMode() {
            editingMode = !editingMode;
            const indicator = document.getElementById('editingIndicator');
            
            if (editingMode) {
                indicator.classList.add('show');
                showNotification('success', '◊û◊¶◊ë ◊¢◊®◊ô◊õ◊î', '◊û◊¶◊ë ◊¢◊®◊ô◊õ◊î ◊î◊ï◊§◊¢◊ú - ◊ú◊ó◊• ◊¢◊ú ◊ò◊ß◊°◊ò ◊ú◊¢◊®◊ô◊õ◊î');
                
                // Re-setup editing if frame is loaded
                const frame = document.getElementById('websiteFrame');
                if (frame.contentDocument) {
                    setupEditingCapabilities(frame);
                }
            } else {
                indicator.classList.remove('show');
                showNotification('info', '◊û◊¶◊ë ◊¢◊®◊ô◊õ◊î', '◊û◊¶◊ë ◊¢◊®◊ô◊õ◊î ◊õ◊ï◊ë◊î');
            }
        }

        // Save file
        function saveFile() {
            if (!currentFileContent) {
                showNotification('warning', '◊ê◊ô◊ü ◊ß◊ï◊ë◊•', '◊ê◊ô◊ü ◊ß◊ï◊ë◊• ◊ú◊©◊û◊ô◊®◊î');
                return;
            }
            
            const frame = document.getElementById('websiteFrame');
            if (frame.contentDocument) {
                // Get updated HTML from iframe
                const updatedHTML = frame.contentDocument.documentElement.outerHTML;
                
                // Create blob and download
                const blob = new Blob([updatedHTML], { type: 'text/html;charset=utf-8' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = currentFileName || 'website.html';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                hasUnsavedChanges = false;
                updateFileIndicator();
                showNotification('success', '◊†◊©◊û◊®', '◊î◊ß◊ï◊ë◊• ◊†◊©◊û◊® ◊ë◊î◊¶◊ú◊ó◊î');
            }
        }

        // Preview file
        function previewFile() {
            const frame = document.getElementById('websiteFrame');
            if (frame.srcdoc) {
                const newWindow = window.open();
                newWindow.document.write(frame.srcdoc);
                newWindow.document.close();
                showNotification('info', '◊™◊¶◊ï◊í◊î ◊û◊ß◊ì◊ô◊û◊î', '◊î◊ê◊™◊® ◊†◊§◊™◊ó ◊ë◊ó◊ú◊ï◊ü ◊ó◊ì◊©');
            }
        }

        // Export file
        function exportFile() {
            saveFile(); // Same as save for now
        }

        // Upload custom file
        function uploadCustomFile() {
            document.getElementById('fileInput').click();
        }

        // Set device view
        function setDevice(device) {
            const buttons = document.querySelectorAll('.device-btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');

            const frame = document.getElementById('websiteFrame');
            
            switch(device) {
                case 'desktop':
                    frame.style.width = '100%';
                    frame.style.height = '100%';
                    break;
                case 'tablet':
                    frame.style.width = '768px';
                    frame.style.height = '80%';
                    frame.style.margin = '0 auto';
                    break;
                case 'mobile':
                    frame.style.width = '375px';
                    frame.style.height = '70%';
                    frame.style.margin = '0 auto';
                    break;
            }

            showNotification('info', '◊û◊¶◊ë ◊™◊¶◊ï◊í◊î', `◊î◊ï◊ó◊ú◊£ ◊ú◊û◊¶◊ë ${device}`);
        }

        // Load sample site
        function loadSampleSite(type) {
            const siteMap = {
                'medical': 'dr-michal-rosen',
                'business': 'law-firm',
                'fitness': 'fitness-coach',
                'education': 'tutor'
            };
            
            const siteId = siteMap[type];
            if (siteId && websiteTemplates[siteId]) {
                document.getElementById('siteSelector').value = siteId;
                loadSelectedSite();
            }
        }

        // AI Functions
        function executeAI() {
            const input = document.getElementById('aiInput').value.trim();
            if (!input) {
                showNotification('warning', '◊ê◊ô◊ü ◊ë◊ß◊©◊î', '◊õ◊™◊ï◊ë ◊ë◊ß◊©◊î ◊ú◊§◊†◊ô ◊î◊§◊¢◊ú◊™ AI');
                return;
            }

            const aiBtn = document.querySelector('.ai-btn');
            const originalText = aiBtn.textContent;
            aiBtn.textContent = 'ü§ñ AI ◊¢◊ï◊ë◊ì...';
            aiBtn.disabled = true;

            setTimeout(() => {
                executeAISimulation(input);
                
                aiBtn.textContent = originalText;
                aiBtn.disabled = false;
                document.getElementById('aiInput').value = '';
                
                showNotification('success', 'AI ◊î◊ï◊©◊ú◊ù', '◊î◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ë◊ï◊¶◊¢◊ï ◊ë◊î◊¶◊ú◊ó◊î!');
            }, 2000);
        }

        function executeAISimulation(request) {
            const frame = document.getElementById('websiteFrame');
            if (!frame.contentDocument) return;

            // Basic AI request interpretation
            if (request.includes('◊¶◊ë◊¢') || request.includes('color')) {
                const colors = ['#667eea', '#764ba2', '#00d4ff', '#48bb78', '#ed8936'];
                const randomColor = colors[Math.floor(Math.random() * colors.length)];
                updatePrimaryColor(randomColor);
            }
            
            if (request.includes('WhatsApp') || request.includes('◊ï◊ï◊ò◊°◊ê◊§')) {
                addWhatsAppButton();
            }
            
            if (request.includes('◊†◊ô◊ô◊ì') || request.includes('mobile')) {
                optimizeForMobile();
            }
        }

        // Style update functions
        function updateFontSize(value) {
            document.getElementById('fontSizeValue').textContent = value + 'px';
            applyStyleToSelected('fontSize', value + 'px');
        }

        function updateTextColor(value) {
            applyStyleToSelected('color', value);
        }

        function updateBgColor(value) {
            applyStyleToSelected('backgroundColor', value);
        }

        function updatePrimaryColor(value) {
            const frame = document.getElementById('websiteFrame');
            if (frame.contentDocument) {
                const style = frame.contentDocument.createElement('style');
                style.textContent = `
                    .btn, .hero, h1, h2, h3 { 
                        color: ${value} !important; 
                    }
                `;
                frame.contentDocument.head.appendChild(style);
                hasUnsavedChanges = true;
                updateFileIndicator();
            }
            showNotification('success', '◊¶◊ë◊¢ ◊¢◊ï◊ì◊õ◊ü', '◊î◊¶◊ë◊¢ ◊î◊®◊ê◊©◊ô ◊©◊ï◊†◊î ◊ë◊õ◊ú ◊î◊ê◊™◊®');
        }

        function updateMaxWidth(value) {
            const frame = document.getElementById('websiteFrame');
            if (frame.contentDocument) {
                const containers = frame.contentDocument.querySelectorAll('.container, .content, main');
                containers.forEach(container => {
                    container.style.maxWidth = value;
                });
                hasUnsavedChanges = true;
                updateFileIndicator();
            }
        }

        function updatePadding(value) {
            document.getElementById('paddingValue').textContent = value + 'px';
            applyStyleToSelected('padding', value + 'px');
        }

        function applyStyleToSelected(property, value) {
            const frame = document.getElementById('websiteFrame');
            if (frame.contentDocument) {
                const selected = frame.contentDocument.querySelector('.editing');
                if (selected) {
                    selected.style[property] = value;
                    hasUnsavedChanges = true;
                    updateFileIndicator();
                } else {
                    showNotification('warning', '◊ê◊ô◊ü ◊ë◊ó◊ô◊®◊î', '◊ë◊ó◊® ◊ê◊ú◊û◊†◊ò ◊ú◊¢◊®◊ô◊õ◊î ◊ß◊ï◊ì◊ù');
                }
            }
        }

        function toggleBold() {
            const frame = document.getElementById('websiteFrame');
            if (frame.contentDocument) {
                const selected = frame.contentDocument.querySelector('.editing');
                if (selected) {
                    const current = selected.style.fontWeight;
                    selected.style.fontWeight = current === 'bold' ? 'normal' : 'bold';
                    hasUnsavedChanges = true;
                    updateFileIndicator();
                    showNotification('success', '◊¢◊ë◊î', '◊û◊©◊ß◊ú ◊î◊í◊ï◊§◊ü ◊©◊ï◊†◊î');
                }
            }
        }

        function toggleItalic() {
            const frame = document.getElementById('websiteFrame');
            if (frame.contentDocument) {
                const selected = frame.contentDocument.querySelector('.editing');
                if (selected) {
                    const current = selected.style.fontStyle;
                    selected.style.fontStyle = current === 'italic' ? 'normal' : 'italic';
                    hasUnsavedChanges = true;
                    updateFileIndicator();
                    showNotification('success', '◊†◊ò◊ï◊ô', '◊°◊í◊†◊ï◊ü ◊î◊í◊ï◊§◊ü ◊©◊ï◊†◊î');
                }
            }
        }

        function addWhatsAppButton() {
            const frame = document.getElementById('websiteFrame');
            if (!frame.contentDocument) return;

            const whatsappHTML = `
                <div style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;">
                    <a href="https://wa.me/972501234567" target="_blank" 
                       style="background: #25d366; color: white; padding: 15px; border-radius: 50px; 
                              text-decoration: none; display: flex; align-items: center; gap: 10px;
                              box-shadow: 0 5px 15px rgba(37, 211, 102, 0.4);">
                        üì± ◊¶◊ï◊® ◊ß◊©◊® ◊ëWhatsApp
                    </a>
                </div>
            `;
            
            frame.contentDocument.body.insertAdjacentHTML('beforeend', whatsappHTML);
            hasUnsavedChanges = true;
            updateFileIndicator();
            showNotification('success', 'WhatsApp ◊†◊ï◊°◊£', '◊õ◊§◊™◊ï◊® WhatsApp ◊†◊ï◊°◊£ ◊ú◊ê◊™◊®');
        }

        function optimizeForMobile() {
            const frame = document.getElementById('websiteFrame');
            if (!frame.contentDocument) return;

            const mobileCSS = `
                @media (max-width: 768px) {
                    body { font-size: 16px !important; }
                    h1 { font-size: 2rem !important; }
                    h2 { font-size: 1.5rem !important; }
                    .container { padding: 1rem !important; }
                    .btn { padding: 1rem 1.5rem !important; font-size: 1rem !important; }
                }
            `;
            
            const style = frame.contentDocument.createElement('style');
            style.textContent = mobileCSS;
            frame.contentDocument.head.appendChild(style);
            
            hasUnsavedChanges = true;
            updateFileIndicator();
            showNotification('success', '◊ê◊ï◊§◊ò◊ô◊û◊ô◊ñ◊¶◊ô◊î', '◊î◊ê◊™◊® ◊ê◊ï◊§◊ò◊ô◊û◊ô◊ñ◊¶◊ô◊î ◊ú◊†◊ô◊ô◊ì');
        }

        // Load demo website
        function loadDemoWebsite(name) {
            const demoHTML = `
<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${name}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Arial, sans-serif; 
            line-height: 1.6;
            color: #333;
        }
        .hero { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            color: white; 
            padding: 100px 20px; 
            text-align: center; 
        }
        .hero h1 { 
            font-size: 3rem; 
            margin-bottom: 1rem; 
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .hero p { 
            font-size: 1.2rem; 
            opacity: 0.9; 
        }
        .content { 
            padding: 80px 20px; 
            max-width: 1200px; 
            margin: 0 auto;
        }
        .btn { 
            background: #667eea; 
            color: white; 
            padding: 15px 30px; 
            border: none; 
            border-radius: 8px; 
            font-size: 1rem; 
            cursor: pointer;
            margin: 10px;
            text-decoration: none;
            display: inline-block;
        }
    </style>
</head>
<body>
    <section class="hero" data-editable="section">
        <h1 data-editable="heading">${name}</h1>
        <p data-editable="text">◊ë◊®◊ï◊õ◊ô◊ù ◊î◊ë◊ê◊ô◊ù ◊ú◊ê◊™◊® ◊î◊û◊ß◊¶◊ï◊¢◊ô ◊©◊ú◊†◊ï</p>
        <a href="#" class="btn" data-editable="button">◊¶◊ï◊® ◊ß◊©◊®</a>
    </section>
    
    <section class="content">
        <h2 data-editable="heading">◊ê◊ï◊ì◊ï◊™◊ô◊†◊ï</h2>
        <p data-editable="text">◊ê◊†◊ó◊†◊ï ◊û◊¶◊ô◊¢◊ô◊ù ◊©◊ô◊®◊ï◊™◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô◊ô◊ù ◊ë◊®◊û◊î ◊î◊í◊ë◊ï◊î◊î ◊ë◊ô◊ï◊™◊®</p>
    </section>
</body>
</html>`;
            
            loadHTMLContent(demoHTML, `${name} (◊ì◊û◊ï)`);
        }

        // Utility functions
        function showNotification(type, title, message) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <strong>${title}</strong><br>
                ${message}
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Drag and drop support
        const fileInputSection = document.querySelector('.file-input-section');
        
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            fileInputSection.addEventListener(eventName, preventDefaults, false);
        });
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        ['dragenter', 'dragover'].forEach(eventName => {
            fileInputSection.addEventListener(eventName, highlight, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            fileInputSection.addEventListener(eventName, unhighlight, false);
        });
        
        function highlight(e) {
            fileInputSection.style.background = 'rgba(0, 212, 255, 0.2)';
        }
        
        function unhighlight(e) {
            fileInputSection.style.background = 'rgba(255, 255, 255, 0.05)';
        }
        
        fileInputSection.addEventListener('drop', handleDrop, false);
        
        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            
            if (files.length > 0) {
                const file = files[0];
                if (file.name.toLowerCase().endsWith('.html') || file.name.toLowerCase().endsWith('.htm')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        loadHTMLContent(e.target.result, file.name);
                    };
                    reader.readAsText(file);
                } else {
                    showNotification('error', '◊°◊ï◊í ◊ß◊ï◊ë◊• ◊ú◊ê ◊†◊™◊û◊ö', '◊†◊ê ◊ú◊í◊®◊ï◊® ◊ß◊ï◊ë◊• HTML');
                }
            }
        }

        // Initialize
        window.addEventListener('load', function() {
            showNotification('success', '◊û◊¢◊®◊õ◊™ ◊û◊ï◊õ◊†◊î', '◊ê◊ì◊ô◊ò◊ï◊® ◊ï◊ô◊ñ◊ï◊ê◊ú◊ô ◊ê◊û◊ô◊™◊ô ◊û◊ï◊õ◊ü ◊ú◊¢◊ë◊ï◊ì◊î!');
            console.log('üéØ WebMaster Pro Real Editor ◊û◊ï◊õ◊ü!');
            console.log('üìä 12 ◊ê◊™◊®◊ô◊ù ◊ñ◊û◊ô◊†◊ô◊ù ◊õ◊ï◊ú◊ú ◊°◊ò◊ï◊ì◊ô◊ï ◊†◊ï◊ô◊î');
            console.log('‚ö° ◊™◊õ◊ï◊†◊ï◊™: ◊¢◊®◊ô◊õ◊î ◊ê◊û◊ô◊™◊ô◊™, ◊©◊û◊ô◊®◊î, AI, ◊ì◊û◊ï◊ê◊ô◊ù');
        });

        // Auto-save warning
        window.addEventListener('beforeunload', function(e) {
            if (hasUnsavedChanges) {
                e.preventDefault();
                e.returnValue = '◊ô◊© ◊©◊ô◊†◊ï◊ô◊ô◊ù ◊ú◊ê ◊©◊û◊ï◊®◊ô◊ù. ◊î◊ê◊ù ◊ê◊™◊î ◊ë◊ò◊ï◊ó ◊©◊ë◊®◊¶◊ï◊†◊ö ◊ú◊¢◊ñ◊ï◊ë?';
                return e.returnValue;
            }
        });
    </script>
</body>
</html>
