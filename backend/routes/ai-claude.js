const axios = require("axios");

// Context-specific prompts for Claude
const CLAUDE_CONTEXTS = {
  "aesthetic-clinic-assistant": `◊ê◊™◊î ◊¢◊ï◊ñ◊®◊™ ◊ó◊õ◊û◊î ◊©◊ú ◊ß◊ú◊ô◊†◊ô◊ß◊™ ◊ì"◊® ◊û◊ô◊õ◊ú ◊®◊ï◊ñ◊ü ◊ú◊®◊§◊ï◊ê◊î ◊ê◊°◊™◊ò◊ô◊™ ◊ë◊™◊ú ◊ê◊ë◊ô◊ë. 
  
◊ê◊™ ◊û◊™◊û◊ó◊î ◊ë◊û◊™◊ü ◊û◊ô◊ì◊¢ ◊û◊ß◊¶◊ï◊¢◊ô ◊¢◊ú:
- ◊ë◊ï◊ò◊ï◊ß◊° (‚Ç™800-1,200)
- ◊ó◊ï◊û◊¶◊î ◊î◊ô◊ê◊ú◊ï◊®◊ï◊†◊ô◊™ (‚Ç™1,200-2,000) 
- ◊ú◊ô◊ô◊ñ◊® ◊§◊®◊ß◊¶◊ô◊ï◊†◊ú◊ô (‚Ç™1,500-2,500)
- ◊§◊ô◊ú◊ô◊†◊í ◊õ◊ô◊û◊ô (‚Ç™600-1,000)
- RF ◊û◊ô◊ß◊®◊ï-◊†◊ô◊ô◊ì◊ú◊ô◊†◊í (‚Ç™1,800-2,500)
- ◊ò◊ô◊§◊ï◊ú◊ô ◊§◊†◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô◊ô◊ù (‚Ç™400-600)

◊¢◊†◊î ◊ë◊¢◊ë◊®◊ô◊™ ◊ë◊¶◊ï◊®◊î ◊ô◊ì◊ô◊ì◊ï◊™◊ô◊™ ◊ï◊û◊ß◊¶◊ï◊¢◊ô◊™. ◊™◊û◊ô◊ì ◊î◊¶◊ô◊¢◊ô ◊ú◊ß◊ë◊ï◊¢ ◊™◊ï◊® ◊ú◊ô◊ô◊¢◊ï◊• ◊ê◊ô◊©◊ô.`,

  "website-builder": `◊ê◊™◊î ◊û◊ï◊û◊ó◊î ◊ë◊ë◊†◊ô◊ô◊™ ◊ê◊™◊®◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô◊ô◊ù. 
  
◊î◊™◊û◊ó◊ï◊™◊ö:
- HTML5, CSS3, JavaScript ◊û◊™◊ß◊ì◊ù
- ◊¢◊ô◊¶◊ï◊ë ◊®◊°◊§◊ï◊†◊°◊ô◊ë◊ô ◊ú◊õ◊ú ◊î◊û◊õ◊©◊ô◊®◊ô◊ù
- Glass Morphism ◊ï◊¢◊ô◊¶◊ï◊ë ◊û◊ï◊ì◊®◊†◊ô
- SEO ◊ê◊ï◊§◊ò◊ô◊û◊ô◊ñ◊¶◊ô◊î
- ◊ë◊ô◊¶◊ï◊¢◊ô◊ù ◊û◊î◊ô◊®◊ô◊ù
- ◊†◊í◊ô◊©◊ï◊™ ◊ï-UX ◊û◊¢◊ï◊ú◊ô◊ù

◊¶◊ï◊® ◊ß◊ï◊ì ◊†◊ß◊ô, ◊û◊ß◊¶◊ï◊¢◊ô ◊ï◊û◊ï◊™◊ê◊ù ◊ú◊¢◊°◊ß◊ô◊ù ◊ô◊©◊®◊ê◊ú◊ô◊ô◊ù.`,

  "content-creator": `◊ê◊™◊î ◊õ◊ï◊™◊ë ◊™◊ï◊õ◊ü ◊©◊ô◊ï◊ï◊ß◊ô ◊û◊ß◊¶◊ï◊¢◊ô ◊ë◊¢◊ë◊®◊ô◊™.
  
◊î◊™◊û◊ó◊ï◊™◊ö:
- ◊õ◊ï◊™◊®◊ï◊™ ◊û◊ï◊©◊õ◊ï◊™ ◊¢◊ô◊ü
- ◊™◊ï◊õ◊ü ◊©◊ô◊ï◊ï◊ß◊ô ◊û◊©◊õ◊†◊¢
- ◊ò◊ß◊°◊ò◊ô◊ù ◊ú◊ê◊™◊®◊ô◊ù ◊¢◊°◊ß◊ô◊ô◊ù
- ◊™◊ô◊ê◊ï◊®◊ô ◊©◊ô◊®◊ï◊™◊ô◊ù ◊ï◊û◊ï◊¶◊®◊ô◊ù
- ◊õ◊™◊ô◊ë◊î SEO ◊ô◊ì◊ô◊ì◊ï◊™◊ô◊™
- ◊™◊ï◊õ◊ü ◊û◊ï◊™◊ê◊ù ◊ú◊ß◊î◊ú ◊î◊ô◊©◊®◊ê◊ú◊ô

◊õ◊™◊ï◊ë ◊™◊ï◊õ◊ü ◊ê◊ô◊õ◊ï◊™◊ô ◊©◊û◊ë◊ô◊ê ◊™◊ï◊¶◊ê◊ï◊™.`,

  "general": `◊ê◊™◊î ◊¢◊ï◊ñ◊® AI ◊û◊ß◊¶◊ï◊¢◊ô ◊ï◊û◊ï◊¢◊ô◊ú ◊©◊¢◊ï◊†◊î ◊ë◊¢◊ë◊®◊ô◊™ ◊ë◊¶◊ï◊®◊î ◊ë◊®◊ï◊®◊î ◊ï◊ê◊û◊ô◊†◊î.`
};

exports.process = async (prompt, context = "general") => {
  try {
    // Check if API key exists
    if (!process.env.CLAUDE_API_KEY) {
      throw new Error("Claude API key not configured");
    }

    const systemPrompt = CLAUDE_CONTEXTS[context] || CLAUDE_CONTEXTS.general;
    
    console.log(`üß† Claude processing with context: ${context}`);
    
    const response = await axios.post("https://api.anthropic.com/v1/messages", {
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 2000,
      messages: [
        { 
          role: "user", 
          content: `${systemPrompt}\n\n◊ë◊ß◊©◊î: ${prompt}` 
        }
      ]
    }, {
      headers: {
        "x-api-key": process.env.CLAUDE_API_KEY,
        "anthropic-version": "2023-06-01",
        "content-type": "application/json"
      },
      timeout: 30000 // 30 seconds timeout
    });
    
    if (!response.data || !response.data.content || !response.data.content[0]) {
      throw new Error("Invalid response format from Claude API");
    }
    
    const reply = response.data.content[0].text;
    
    console.log(`‚úÖ Claude response: ${reply.length} characters`);
    
    return { 
      reply: reply.trim(),
      engine: "Claude 3.5 Sonnet",
      success: true,
      tokens_used: response.data.usage || null
    };
    
  } catch (error) {
    console.error("‚ùå Claude API Error:", error.response?.data || error.message);
    
    // Specific error messages
    if (error.response?.status === 401) {
      throw new Error("Claude API key is invalid or expired");
    } else if (error.response?.status === 429) {
      throw new Error("Claude API rate limit exceeded. Please try again later");
    } else if (error.response?.status === 400) {
      throw new Error("Invalid request to Claude API");
    } else if (error.code === 'ECONNABORTED') {
      throw new Error("Claude API request timed out");
    } else {
      throw new Error(`Claude processing failed: ${error.message}`);
    }
  }
};
