const { OpenAI } = require("openai");

// Initialize OpenAI client
let openai;
try {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });
} catch (error) {
  console.warn("‚ö†Ô∏è OpenAI client initialization failed:", error.message);
}

// Context-specific prompts for GPT
const GPT_CONTEXTS = {
  "aesthetic-clinic-assistant": `◊ê◊™◊î ◊¢◊ï◊ñ◊® ◊ó◊õ◊ù ◊©◊ú ◊ß◊ú◊ô◊†◊ô◊ß◊™ ◊ì"◊® ◊û◊ô◊õ◊ú ◊®◊ï◊ñ◊ü ◊ú◊®◊§◊ï◊ê◊î ◊ê◊°◊™◊ò◊ô◊™. 

◊û◊ô◊ì◊¢ ◊¢◊ú ◊î◊ß◊ú◊ô◊†◊ô◊ß◊î:
- ◊û◊ô◊ß◊ï◊ù: ◊®◊ó' ◊ì◊ô◊ñ◊†◊í◊ï◊£ 120, ◊™◊ú ◊ê◊ë◊ô◊ë
- ◊ò◊ú◊§◊ï◊ü: 03-5555555
- ◊©◊¢◊ï◊™ ◊§◊™◊ô◊ó◊î: ◊ê'-◊î' 9:00-17:00

◊©◊ô◊®◊ï◊™◊ô◊ù ◊ï◊û◊ó◊ô◊®◊ô◊ù:
- ◊ë◊ï◊ò◊ï◊ß◊°: ‚Ç™800-1,200 (◊ú◊§◊ô ◊ê◊ñ◊ï◊®)
- ◊ó◊ï◊û◊¶◊î ◊î◊ô◊ê◊ú◊ï◊®◊ï◊†◊ô◊™: ‚Ç™1,200-2,000 (◊ú◊§◊ô ◊õ◊û◊ï◊™)
- ◊ú◊ô◊ô◊ñ◊® ◊§◊®◊ß◊¶◊ô◊ï◊†◊ú◊ô: ‚Ç™1,500-2,500 (◊ú◊§◊ô ◊ê◊ñ◊ï◊®) 
- ◊§◊ô◊ú◊ô◊†◊í ◊õ◊ô◊û◊ô: ‚Ç™600-1,000 (◊ú◊§◊ô ◊¢◊ï◊û◊ß)
- RF ◊û◊ô◊ß◊®◊ï-◊†◊ô◊ô◊ì◊ú◊ô◊†◊í: ‚Ç™1,800-2,500
- ◊ò◊ô◊§◊ï◊ú ◊§◊†◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô: ‚Ç™400-600

◊¢◊†◊î ◊ë◊¢◊ë◊®◊ô◊™ ◊ë◊¶◊ï◊®◊î ◊ô◊ì◊ô◊ì◊ï◊™◊ô◊™ ◊ï◊û◊ß◊¶◊ï◊¢◊ô◊™. ◊î◊û◊ú◊• ◊™◊û◊ô◊ì ◊¢◊ú ◊ô◊ô◊¢◊ï◊• ◊ê◊ô◊©◊ô.`,

  "website-builder": `◊ê◊™◊î ◊û◊§◊™◊ó ◊ê◊™◊®◊ô◊ù ◊û◊ß◊¶◊ï◊¢◊ô ◊î◊û◊™◊û◊ó◊î ◊ë:

◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊ï◊™:
- HTML5 ◊°◊û◊†◊ò◊ô ◊ï◊†◊ß◊ô
- CSS3 ◊û◊™◊ß◊ì◊ù ◊¢◊ù Flexbox/Grid
- JavaScript ES6+ ◊û◊ï◊ì◊®◊†◊ô
- ◊¢◊ô◊¶◊ï◊ë ◊®◊°◊§◊ï◊†◊°◊ô◊ë◊ô ◊û◊ï◊©◊ú◊ù

◊¢◊ô◊¶◊ï◊ë:
- Glass Morphism ◊ï◊ê◊§◊ß◊ò◊ô◊ù ◊û◊™◊ß◊ì◊û◊ô◊ù
- ◊ò◊ô◊§◊ï◊í◊®◊§◊ô◊î ◊û◊ß◊¶◊ï◊¢◊ô◊™ (Heebo, Inter)
- ◊¶◊ë◊¢◊ô◊ù ◊ë◊®◊û◊î ◊¢◊ï◊ú◊û◊ô◊™
- UX/UI ◊û◊¢◊ï◊ú◊ô◊ù

SEO ◊ï◊ë◊ô◊¶◊ï◊¢◊ô◊ù:
- ◊û◊ò◊î ◊™◊í◊ô◊ù ◊û◊ï◊™◊ê◊û◊ô◊ù
- ◊û◊î◊ô◊®◊ï◊™ ◊ò◊¢◊ô◊†◊î ◊û◊ß◊°◊ô◊û◊ú◊ô◊™  
- ◊†◊í◊ô◊©◊ï◊™ ◊û◊ú◊ê◊î
- ◊ß◊ï◊ì ◊†◊ß◊ô ◊ï◊ê◊ï◊§◊ò◊ô◊û◊ú◊ô

◊¶◊ï◊® ◊ê◊™◊®◊ô◊ù ◊ë◊®◊û◊î ◊©◊ú Framer/Squarespace.`,

  "content-creator": `◊ê◊™◊î ◊õ◊ï◊™◊ë ◊™◊ï◊õ◊ü ◊©◊ô◊ï◊ï◊ß◊ô ◊ô◊¶◊ô◊®◊™◊ô ◊ï◊û◊ß◊¶◊ï◊¢◊ô ◊ë◊¢◊ë◊®◊ô◊™.

◊î◊™◊û◊ó◊ï◊ô◊ï◊™:
- ◊õ◊ï◊™◊®◊ï◊™ ◊û◊ï◊©◊õ◊ï◊™ ◊ï◊û◊¢◊ï◊®◊®◊ï◊™ ◊¢◊†◊ô◊ô◊ü
- ◊™◊ï◊õ◊ü ◊©◊ô◊ï◊ï◊ß◊ô ◊û◊©◊õ◊†◊¢ ◊ï◊û◊ï◊õ◊ó
- ◊™◊ô◊ê◊ï◊®◊ô ◊©◊ô◊®◊ï◊™◊ô◊ù ◊û◊§◊ï◊®◊ò◊ô◊ù
- ◊ò◊ß◊°◊ò◊ô◊ù ◊ú◊ì◊§◊ô ◊†◊ó◊ô◊™◊î
- ◊õ◊™◊ô◊ë◊î SEO ◊û◊ï◊™◊ê◊û◊™
- ◊™◊ï◊õ◊ü ◊ú◊®◊©◊™◊ï◊™ ◊ó◊ë◊®◊™◊ô◊ï◊™

◊°◊í◊†◊ï◊ü ◊õ◊™◊ô◊ë◊î:
- ◊ô◊ì◊ô◊ì◊ï◊™◊ô ◊ï◊û◊ß◊¶◊ï◊¢◊ô
- ◊û◊ï◊™◊ê◊ù ◊ú◊ß◊î◊ú ◊î◊ô◊©◊®◊ê◊ú◊ô
- ◊û◊©◊õ◊†◊¢ ◊ï◊û◊†◊ô◊¢ ◊ú◊§◊¢◊ï◊ú◊î
- ◊ë◊®◊ï◊® ◊ï◊ß◊®◊ô◊ê

◊û◊ò◊®◊î: ◊ô◊¶◊ô◊®◊™ ◊™◊ï◊õ◊ü ◊©◊û◊ë◊ô◊ê ◊™◊ï◊¶◊ê◊ï◊™ ◊û◊õ◊ô◊®◊î.`,

  "general": `◊ê◊™◊î ◊¢◊ï◊ñ◊® AI ◊û◊ï◊¢◊ô◊ú ◊ï◊û◊ß◊¶◊ï◊¢◊ô ◊©◊¢◊ï◊†◊î ◊ë◊¢◊ë◊®◊ô◊™ ◊ë◊¶◊ï◊®◊î ◊ë◊®◊ï◊®◊î, ◊û◊ì◊ï◊ô◊ß◊™ ◊ï◊û◊ï◊¢◊ô◊ú◊î.`
};

exports.process = async (prompt, context = "general") => {
  try {
    // Check if OpenAI is properly initialized
    if (!openai || !process.env.OPENAI_API_KEY) {
      throw new Error("OpenAI API key not configured");
    }

    const systemPrompt = GPT_CONTEXTS[context] || GPT_CONTEXTS.general;
    
    console.log(`ü§ñ GPT processing with context: ${context}`);
    
    const response = await openai.chat.completions.create({
      model: "gpt-4-turbo-preview",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: prompt }
      ],
      max_tokens: 2000,
      temperature: 0.7,
      top_p: 0.9,
      frequency_penalty: 0.1,
      presence_penalty: 0.1
    });
    
    if (!response.choices || !response.choices[0] || !response.choices[0].message) {
      throw new Error("Invalid response format from OpenAI API");
    }
    
    const reply = response.choices[0].message.content;
    
    console.log(`‚úÖ GPT response: ${reply.length} characters`);
    
    return { 
      reply: reply.trim(),
      engine: "GPT-4 Turbo",
      success: true,
      tokens_used: response.usage || null,
      finish_reason: response.choices[0].finish_reason
    };
    
  } catch (error) {
    console.error("‚ùå OpenAI API Error:", error);
    
    // Specific error handling
    if (error.status === 401) {
      throw new Error("OpenAI API key is invalid or expired");
    } else if (error.status === 429) {
      throw new Error("OpenAI API rate limit exceeded. Please try again later");
    } else if (error.status === 400) {
      throw new Error("Invalid request to OpenAI API");
    } else if (error.code === 'ECONNABORTED') {
      throw new Error("OpenAI API request timed out");
    } else if (error.message?.includes('insufficient_quota')) {
      throw new Error("OpenAI API quota exceeded. Please check your billing");
    } else {
      throw new Error(`GPT processing failed: ${error.message}`);
    }
  }
};
